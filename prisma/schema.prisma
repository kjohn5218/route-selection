generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      String    @default("DRIVER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employee  Employee?
  passwordResetTokens PasswordResetToken[]
  auditLogs AuditLog[]

  @@map("users")
}

model Employee {
  id                 String             @id @default(cuid())
  employeeId         String             @unique
  firstName          String
  lastName           String
  email              String             @unique
  phone              String?
  hireDate           DateTime
  doublesEndorsement Boolean            @default(false)
  chainExperience    Boolean            @default(false)
  isEligible         Boolean            @default(true)
  currentRouteId     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  assignments        Assignment[]
  disqualifications  Disqualification[]
  route              Route?             @relation("CurrentAssignment", fields: [currentRouteId], references: [id])
  user               User               @relation(fields: [email], references: [email])
  selections         Selection[]

  @@map("employees")
}

model Route {
  id                         String        @id @default(cuid())
  runNumber                  String        @unique
  type                       String
  origin                     String
  destination                String
  days                       String
  startTime                  String
  endTime                    String
  distance                   Float
  rateType                   String
  workTime                   Float
  requiresDoublesEndorsement Boolean       @default(false)
  requiresChainExperience    Boolean       @default(false)
  isActive                   Boolean       @default(true)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  assignments                Assignment[]
  currentEmployees           Employee[]    @relation("CurrentAssignment")
  periodRoutes               PeriodRoute[]
  thirdChoiceSelections      Selection[]   @relation("ThirdChoice")
  secondChoiceSelections     Selection[]   @relation("SecondChoice")
  firstChoiceSelections      Selection[]   @relation("FirstChoice")

  @@map("routes")
}

model SelectionPeriod {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String        @default("UPCOMING")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignments Assignment[]
  routes      PeriodRoute[]
  selections  Selection[]

  @@map("selection_periods")
}

model Selection {
  id                 String          @id @default(cuid())
  employeeId         String
  selectionPeriodId  String
  firstChoiceId      String?
  secondChoiceId     String?
  thirdChoiceId      String?
  submittedAt        DateTime        @default(now())
  confirmationNumber String          @unique
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  thirdChoice        Route?          @relation("ThirdChoice", fields: [thirdChoiceId], references: [id])
  secondChoice       Route?          @relation("SecondChoice", fields: [secondChoiceId], references: [id])
  firstChoice        Route?          @relation("FirstChoice", fields: [firstChoiceId], references: [id])
  selectionPeriod    SelectionPeriod @relation(fields: [selectionPeriodId], references: [id])
  employee           Employee        @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, selectionPeriodId])
  @@map("selections")
}

model Assignment {
  id                String          @id @default(cuid())
  employeeId        String
  selectionPeriodId String
  routeId           String?
  choiceReceived    Int?
  effectiveDate     DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  route             Route?          @relation(fields: [routeId], references: [id])
  selectionPeriod   SelectionPeriod @relation(fields: [selectionPeriodId], references: [id])
  employee          Employee        @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, selectionPeriodId])
  @@map("assignments")
}

model Disqualification {
  id         String    @id @default(cuid())
  employeeId String
  reason     String
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("disqualifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String?
  timestamp DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("audit_logs")
}

model PeriodRoute {
  selectionPeriodId String
  routeId           String
  createdAt         DateTime        @default(now())
  route             Route           @relation(fields: [routeId], references: [id], onDelete: Cascade)
  selectionPeriod   SelectionPeriod @relation(fields: [selectionPeriodId], references: [id], onDelete: Cascade)

  @@id([selectionPeriodId, routeId])
  @@map("period_routes")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}
