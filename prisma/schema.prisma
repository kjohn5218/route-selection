// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("DRIVER") // ADMIN or DRIVER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee?

  @@map("users")
}

model Employee {
  id                 String   @id @default(cuid())
  employeeId         String   @unique
  firstName          String
  lastName           String
  email              String   @unique
  phone              String?
  hireDate           DateTime
  doublesEndorsement Boolean  @default(false)
  chainExperience    Boolean  @default(false)
  isEligible         Boolean  @default(true)
  currentRouteId     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user   User   @relation(fields: [email], references: [email])
  route  Route? @relation("CurrentAssignment", fields: [currentRouteId], references: [id])

  selections    Selection[]
  assignments   Assignment[]
  disqualifications Disqualification[]

  @@map("employees")
}

model Route {
  id          String    @id @default(cuid())
  runNumber   String    @unique
  type        String    // LOCAL, REGIONAL, LONG_HAUL, DEDICATED
  origin      String
  destination String
  days        String
  startTime   String
  endTime     String
  distance    Float
  rateType    String    // HOURLY, MILEAGE, SALARY
  workTime    Float
  requiresDoublesEndorsement Boolean @default(false)
  requiresChainExperience    Boolean @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  currentEmployees Employee[] @relation("CurrentAssignment")
  firstChoiceSelections  Selection[] @relation("FirstChoice")
  secondChoiceSelections Selection[] @relation("SecondChoice")
  thirdChoiceSelections  Selection[] @relation("ThirdChoice")
  assignments      Assignment[]

  @@map("routes")
}

model SelectionPeriod {
  id         String              @id @default(cuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  status     String              @default("UPCOMING") // UPCOMING, OPEN, CLOSED, PROCESSING, COMPLETED
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  selections  Selection[]
  assignments Assignment[]

  @@map("selection_periods")
}

model Selection {
  id                 String   @id @default(cuid())
  employeeId         String
  selectionPeriodId  String
  firstChoiceId      String?
  secondChoiceId     String?
  thirdChoiceId      String?
  submittedAt        DateTime @default(now())
  confirmationNumber String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employee        Employee        @relation(fields: [employeeId], references: [id])
  selectionPeriod SelectionPeriod @relation(fields: [selectionPeriodId], references: [id])
  firstChoice     Route?          @relation("FirstChoice", fields: [firstChoiceId], references: [id])
  secondChoice    Route?          @relation("SecondChoice", fields: [secondChoiceId], references: [id])
  thirdChoice     Route?          @relation("ThirdChoice", fields: [thirdChoiceId], references: [id])

  @@unique([employeeId, selectionPeriodId])
  @@map("selections")
}

model Assignment {
  id                String   @id @default(cuid())
  employeeId        String
  selectionPeriodId String
  routeId           String?
  choiceReceived    Int?     // 1, 2, or 3 for which choice was awarded, null for float pool
  effectiveDate     DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  employee        Employee        @relation(fields: [employeeId], references: [id])
  selectionPeriod SelectionPeriod @relation(fields: [selectionPeriodId], references: [id])
  route           Route?          @relation(fields: [routeId], references: [id])

  @@unique([employeeId, selectionPeriodId])
  @@map("assignments")
}

model Disqualification {
  id         String   @id @default(cuid())
  employeeId String
  reason     String
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("disqualifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// Enums are replaced with string constants for SQLite compatibility
// Role: "ADMIN" | "DRIVER"
// RouteType: "LOCAL" | "REGIONAL" | "LONG_HAUL" | "DEDICATED" | "DOUBLES"
// RateType: "HOURLY" | "MILEAGE" | "SALARY"
// SelectionPeriodStatus: "UPCOMING" | "OPEN" | "CLOSED" | "PROCESSING" | "COMPLETED"